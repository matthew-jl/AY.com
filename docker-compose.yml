services:
  postgres:
    image: postgres:15
    container_name: ay-postgres-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_main_data:/var/lib/postgresql/data
      # script for creating multiple databases
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      # pg_isready to check if the database server is accepting connections
      test: ["CMD-SHELL", "pg_isready -U user -d postgres -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s

  user-service:
    build:
      context: ./backend
      dockerfile: user-service/Dockerfile
    container_name: user-service
    ports:
      - "50051:50051"
    env_file: ./backend/user-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.default.disable_ipv6=1

  thread-service:
    build:
      context: ./backend
      dockerfile: thread-service/Dockerfile
    container_name: thread-service
    ports:
      - "50052:50052"
    env_file: ./backend/thread-service/.env
    depends_on:
      postgres:
        condition: service_healthy

  media-service:
    build:
      context: ./backend
      dockerfile: media-service/Dockerfile
    container_name: media-service
    ports:
      - "50053:50053"
    env_file: ./backend/media-service/.env
    depends_on:
      postgres:
        condition: service_healthy

  search-service:
    build:
      context: ./backend
      dockerfile: search-service/Dockerfile
    container_name: search-service
    ports:
      - "50054:50054"
    environment:
      PORT: 50054
      USER_DB_DSN: "postgres://user:password@postgres:5432/ay_user_db?sslmode=disable"
      THREAD_DB_DSN: "postgres://user:password@postgres:5432/ay_thread_db?sslmode=disable"
      REDIS_ADDR: "redis:6379"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  api-gateway:
    build:
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    env_file: ./backend/api-gateway/.env
    depends_on:
      - user-service
      - thread-service
      - media-service

  redis:
    image: redis:7-alpine
    container_name: ay-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres_main_data:
  redis_data:
