openapi: 3.0.0
info:
  title: API Gateway
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
    HealthResponse:
      type: object
      properties:
        status:
          type: string
    AuthRequest:
      type: object
      required:
        - email
        - password
        - recaptchaToken
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        recaptchaToken:
          type: string
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    RegisterRequest:
      type: object
      required:
        - name
        - username
        - email
        - password
        - gender
        - date_of_birth
        - security_question
        - security_answer
        - recaptchaToken
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        gender:
          type: string
          enum: ["MALE", "FEMALE", "OTHER"]
        date_of_birth:
          type: string
          format: date
        security_question:
          type: string
        security_answer:
          type: string
        recaptchaToken:
          type: string
    VerifyEmailRequest:
      type: object
      required:
        - email
        - code
      properties:
        email:
          type: string
          format: email
        code:
          type: string
    GetSecurityQuestionRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    GetSecurityQuestionResponse:
      type: object
      properties:
        security_question:
          type: string
    ResetPasswordRequest:
      type: object
      required:
        - email
        - security_answer
        - new_password
      properties:
        email:
          type: string
          format: email
        security_answer:
          type: string
        new_password:
          type: string
    UserProfileResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        gender:
          type: string
        profile_picture:
          type: string
          nullable: true
        banner:
          type: string
          nullable: true
        date_of_birth:
          type: string
          format: date
        account_status:
          type: string
        account_privacy:
          type: string
        created_at:
          type: string
          format: date-time
    CreateThreadRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        parent_thread_id:
          type: integer
        reply_restriction:
          type: string
          enum: ["EVERYONE", "FOLLOWING"]
        scheduled_at:
          type: string
          format: date-time
          nullable: true
        community_id:
          type: integer
        media_ids:
          type: array
          items:
            type: integer
    ThreadData:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        parent_thread_id:
          type: integer
          nullable: true
        reply_restriction:
          type: string
        scheduled_at:
          type: string
          format: date-time
          nullable: true
        posted_at:
          type: string
          format: date-time
        community_id:
          type: integer
          nullable: true
        is_advertisement:
          type: boolean
        media_ids:
          type: array
          items:
            type: integer
        created_at:
          type: string
          format: date-time
        author:
          $ref: "#/components/schemas/UserProfileResponse"
          nullable: true
        media:
          type: array
          items:
            $ref: "#/components/schemas/MediaMetadata"
        is_liked:
          type: boolean
        is_bookmarked:
          type: boolean
        is_reposted:
          type: boolean
        like_count:
          type: integer
        reply_count:
          type: integer
        repost_count:
          type: integer
    MediaMetadata:
      type: object
      properties:
        id:
          type: integer
        uploader_user_id:
          type: integer
        supabase_path:
          type: string
        bucket_name:
          type: string
        mime_type:
          type: string
        file_size:
          type: integer
        public_url:
          type: string
        created_at:
          type: string
          format: date-time
    FeedResponse:
      type: object
      properties:
        threads:
          type: array
          items:
            $ref: "#/components/schemas/ThreadData"
        has_more:
          type: boolean
paths:
  /health:
    get:
      summary: Check API Gateway health
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /api/v1/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: Registration successful
        "400":
          description: Bad request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/auth/verify:
    post:
      summary: Verify email with code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest"
      responses:
        "200":
          description: Email verified
        "400":
          description: Invalid verification code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/auth/forgot-password/question:
    post:
      summary: Get security question for password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSecurityQuestionRequest"
      responses:
        "200":
          description: Security question retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSecurityQuestionResponse"
        "404":
          description: Email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/auth/forgot-password/reset:
    post:
      summary: Reset password using security answer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Invalid security answer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/users/health:
    get:
      summary: Check user-service health
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/users/profile:
    get:
      summary: Get authenticated user's profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/threads:
    post:
      summary: Create a new thread
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThreadRequest"
      responses:
        "200":
          description: Thread created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadData"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/threads/feed:
    get:
      summary: Get feed threads (for you or following)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: ["foryou", "following"]
          required: false
        - in: query
          name: page
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: Feed retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/threads/{threadId}:
    get:
      summary: Get a thread by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: threadId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Thread retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadData"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a thread
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: threadId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Thread deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/threads/{threadId}/like:
    post:
      summary: Like a thread
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: threadId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Thread liked
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Unlike a thread
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: threadId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Thread unliked
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/threads/{threadId}/bookmark:
    post:
      summary: Bookmark a thread
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: threadId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Thread bookmarked
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Unbookmark a thread
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: threadId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Thread unbookmarked
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/media/upload:
    post:
      summary: Upload media file
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Media uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  media:
                    $ref: "#/components/schemas/MediaMetadata"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/ws/connect:
    get:
      summary: Establish WebSocket connection
      security:
        - bearerAuth: []
      responses:
        "101":
          description: Switching Protocols (WebSocket handshake)
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
