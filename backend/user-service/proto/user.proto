syntax = "proto3";

package user;

option go_package = "github.com/Acad600-TPA/WEB-MJ-242/backend/user-service/genproto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service UserService {
  rpc HealthCheck(google.protobuf.Empty) returns (HealthResponse);
  rpc Register(RegisterRequest) returns (google.protobuf.Empty);
  rpc Login(LoginRequest) returns (AuthResponse);
  rpc VerifyEmail(VerifyEmailRequest) returns (google.protobuf.Empty);
  rpc GetSecurityQuestion(GetSecurityQuestionRequest) returns (GetSecurityQuestionResponse);
  rpc ResetPassword(ResetPasswordRequest) returns (google.protobuf.Empty);
  rpc GetUserProfile(GetUserProfileRequest) returns (UserProfileResponse);
  rpc GetUserProfilesByIds(GetUserProfilesByIdsRequest) returns (GetUserProfilesByIdsResponse);
  rpc ResendVerificationCode(ResendVerificationCodeRequest) returns (google.protobuf.Empty);
  rpc FollowUser(FollowRequest) returns (google.protobuf.Empty);
  rpc UnfollowUser(FollowRequest) returns (google.protobuf.Empty);
  rpc BlockUser(BlockRequest) returns (google.protobuf.Empty);
  rpc UnblockUser(BlockRequest) returns (google.protobuf.Empty);
  rpc GetFollowers(GetSocialListRequest) returns (GetSocialListResponse);
  rpc GetFollowing(GetSocialListRequest) returns (GetSocialListResponse);
  rpc GetUserByUsername(GetUserByUsernameRequest) returns (User);
  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (User);
  rpc GetBlockedUserIDs(SocialListRequest) returns (UserIDListResponse); 
  rpc GetBlockingUserIDs(SocialListRequest) returns (UserIDListResponse);
  rpc GetFollowingIDs(SocialListRequest) returns (UserIDListResponse);
  rpc IsBlockedBy(BlockCheckRequest) returns (BlockStatusResponse);
  rpc HasBlocked(BlockCheckRequest) returns (BlockStatusResponse);
  rpc IsFollowing(FollowCheckRequest) returns (BlockStatusResponse);
  rpc ApplyForPremium(ApplyForPremiumRequest) returns (google.protobuf.Empty);
}

message HealthResponse {
  string status = 1;
}

message User {
  uint32 id = 1;
  string name = 2;
  string username = 3;
  string email = 4;
  string gender = 5;
  string profile_picture = 6; // URL or identifier
  string banner = 7;          // URL or identifier
  string date_of_birth = 8;
  string account_status = 9;
  string account_privacy = 10;
  google.protobuf.Timestamp created_at = 11;
  bool subscribed_to_newsletter = 12;
  string bio = 13;
  bool is_verified = 14;
}

message RegisterRequest {
  string name = 1;
  string username = 2;
  string email = 3;
  string password = 4;
  string gender = 5;
  string date_of_birth = 6;
  string security_question = 7;
  string security_answer = 8;
  bool subscribed_to_newsletter = 9;
  optional string profile_picture_url = 10;
  optional string banner_url = 11;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message AuthResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message VerifyEmailRequest {
  string email = 1;
  string code = 2;
}

message GetSecurityQuestionRequest {
  string email = 1;
}

message GetSecurityQuestionResponse {
  string security_question = 1;
}

message ResetPasswordRequest {
  string email = 1;
  string security_answer = 2;
  string new_password = 3;
}

message GetUserByUsernameRequest {
  string username = 1;
}

message GetUserProfilesByIdsRequest {
  repeated uint32 user_ids = 1;
}

message GetUserProfilesByIdsResponse {
  map<uint32, User> users = 1;
}

message ResendVerificationCodeRequest {
  string email = 1;
}

message UserProfileResponse {
  User user = 1;
  int32 follower_count = 2;
  int32 following_count = 3;
  bool is_followed_by_requester = 4;
  bool is_blocked_by_requester = 5;
  bool is_blocking_requester = 6;
}

message GetUserProfileRequest {
  uint32 user_id_to_view = 1;
  optional uint32 requester_user_id = 2;
}

message UpdateUserProfileRequest {
  uint32 user_id = 1;
  optional string name = 2;
  // optional string username = 3;
  // optional string email = 4;
  optional string current_password = 5;
  optional string new_password = 6;
  optional string gender = 7;
  optional string profile_picture_url = 8;
  optional string banner_url = 9;
  optional string date_of_birth = 10;
  optional string bio = 11;
  optional string account_privacy = 12;
  optional bool subscribed_to_newsletter = 13;
}

message FollowRequest {
  uint32 follower_id = 1;
  uint32 followed_id = 2;
}

message BlockRequest {
  uint32 blocker_id = 1;
  uint32 blocked_id = 2;
}

message GetSocialListRequest {
  uint32 user_id = 1;
  optional uint32 requester_user_id = 2;
  int32 page = 3;
  int32 limit = 4;
}


message SocialUser {
  User user_summary = 1;
  bool is_followed_by_requester = 2;
}

message GetSocialListResponse {
  repeated SocialUser users = 1;
  bool has_more = 2;
}

// for getting the user's own social list (blocked, blocking, following)
message SocialListRequest {
  uint32 user_id = 1;
  int32 page = 2;
  int32 limit = 3;
}

message UserIDListResponse {
  repeated uint32 user_ids = 1;
  bool has_more = 2;
}

message BlockCheckRequest {
  uint32 actor_id = 1;  
  uint32 subject_id = 2;
}
message BlockStatusResponse {
  bool is_true = 1;
}

message FollowCheckRequest {
  uint32 follower_id = 1;
  uint32 followed_id = 2;
}

message ApplyForPremiumRequest {
  uint32 user_id = 1;
  string national_identity_card_no_hashed = 2;
  string reason = 3;
  string face_picture_url = 4;
}
