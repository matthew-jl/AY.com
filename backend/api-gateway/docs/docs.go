// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/register": {
            "post": {
                "description": "Register a new user with name, username, email, password, gender, date of birth, security question and answer, and optional profile picture and banner URLs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.RegisterPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Empty response on successful registration",
                        "schema": {
                            "$ref": "#/definitions/emptypb.Empty"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., email already exists)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/threads/{threadId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a thread by its ID for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "threads"
                ],
                "summary": "Delete a thread",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid thread ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication context missing or unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/me/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the authenticated user's profile details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user's profile",
                "responses": {
                    "200": {
                        "description": "User profile details",
                        "schema": {
                            "$ref": "#/definitions/genproto.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication context missing or unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User profile not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update current user's profile",
                "parameters": [
                    {
                        "description": "Updated profile details",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateProfilePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user profile in frontend format",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication context missing or unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "emptypb.Empty": {
            "type": "object"
        },
        "genproto.User": {
            "type": "object",
            "properties": {
                "account_privacy": {
                    "type": "string"
                },
                "account_status": {
                    "type": "string"
                },
                "banner": {
                    "description": "URL or identifier",
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "created_at": {
                    "$ref": "#/definitions/timestamppb.Timestamp"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "profile_picture": {
                    "description": "URL or identifier",
                    "type": "string"
                },
                "subscribed_to_newsletter": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "genproto.UserProfileResponse": {
            "type": "object",
            "properties": {
                "follower_count": {
                    "type": "integer"
                },
                "following_count": {
                    "type": "integer"
                },
                "is_blocked_by_requester": {
                    "type": "boolean"
                },
                "is_blocking_requester": {
                    "type": "boolean"
                },
                "is_followed_by_requester": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/genproto.User"
                }
            }
        },
        "http.RegisterPayload": {
            "type": "object",
            "required": [
                "date_of_birth",
                "email",
                "name",
                "password",
                "recaptchaToken",
                "security_answer",
                "security_question",
                "username"
            ],
            "properties": {
                "banner_url": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "recaptchaToken": {
                    "type": "string"
                },
                "security_answer": {
                    "type": "string"
                },
                "security_question": {
                    "type": "string"
                },
                "subscribed_to_newsletter": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "http.UpdateProfilePayload": {
            "type": "object",
            "properties": {
                "account_privacy": {
                    "type": "string"
                },
                "banner_url": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "current_password": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "subscribed_to_newsletter": {
                    "type": "boolean"
                }
            }
        },
        "timestamppb.Timestamp": {
            "type": "object",
            "properties": {
                "nanos": {
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                    "type": "integer"
                },
                "seconds": {
                    "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
