// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/community.proto

package communitypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommunityService_HealthCheck_FullMethodName                 = "/community.CommunityService/HealthCheck"
	CommunityService_CreateCommunity_FullMethodName             = "/community.CommunityService/CreateCommunity"
	CommunityService_GetCommunityDetails_FullMethodName         = "/community.CommunityService/GetCommunityDetails"
	CommunityService_ListCommunities_FullMethodName             = "/community.CommunityService/ListCommunities"
	CommunityService_RequestToJoinCommunity_FullMethodName      = "/community.CommunityService/RequestToJoinCommunity"
	CommunityService_AcceptJoinRequest_FullMethodName           = "/community.CommunityService/AcceptJoinRequest"
	CommunityService_RejectJoinRequest_FullMethodName           = "/community.CommunityService/RejectJoinRequest"
	CommunityService_GetCommunityMembers_FullMethodName         = "/community.CommunityService/GetCommunityMembers"
	CommunityService_GetUserJoinRequests_FullMethodName         = "/community.CommunityService/GetUserJoinRequests"
	CommunityService_GetCommunityPendingRequests_FullMethodName = "/community.CommunityService/GetCommunityPendingRequests"
)

// CommunityServiceClient is the client API for CommunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityServiceClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CommunityDetails, error)
	GetCommunityDetails(ctx context.Context, in *GetCommunityDetailsRequest, opts ...grpc.CallOption) (*CommunityDetailsResponse, error)
	ListCommunities(ctx context.Context, in *ListCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error)
	RequestToJoinCommunity(ctx context.Context, in *CommunityUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcceptJoinRequest(ctx context.Context, in *CommunityUserActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RejectJoinRequest(ctx context.Context, in *CommunityUserActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCommunityMembers(ctx context.Context, in *GetCommunityMembersRequest, opts ...grpc.CallOption) (*GetCommunityMembersResponse, error)
	GetUserJoinRequests(ctx context.Context, in *GetUserJoinRequestsRequest, opts ...grpc.CallOption) (*GetUserJoinRequestsResponse, error)
	GetCommunityPendingRequests(ctx context.Context, in *GetCommunityPendingRequestsRequest, opts ...grpc.CallOption) (*GetCommunityPendingRequestsResponse, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, CommunityService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CommunityDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommunityDetails)
	err := c.cc.Invoke(ctx, CommunityService_CreateCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityDetails(ctx context.Context, in *GetCommunityDetailsRequest, opts ...grpc.CallOption) (*CommunityDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommunityDetailsResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCommunityDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListCommunities(ctx context.Context, in *ListCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommunitiesResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListCommunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RequestToJoinCommunity(ctx context.Context, in *CommunityUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CommunityService_RequestToJoinCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) AcceptJoinRequest(ctx context.Context, in *CommunityUserActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CommunityService_AcceptJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RejectJoinRequest(ctx context.Context, in *CommunityUserActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CommunityService_RejectJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityMembers(ctx context.Context, in *GetCommunityMembersRequest, opts ...grpc.CallOption) (*GetCommunityMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommunityMembersResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCommunityMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetUserJoinRequests(ctx context.Context, in *GetUserJoinRequestsRequest, opts ...grpc.CallOption) (*GetUserJoinRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserJoinRequestsResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetUserJoinRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityPendingRequests(ctx context.Context, in *GetCommunityPendingRequestsRequest, opts ...grpc.CallOption) (*GetCommunityPendingRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommunityPendingRequestsResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCommunityPendingRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService service.
// All implementations must embed UnimplementedCommunityServiceServer
// for forward compatibility.
type CommunityServiceServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error)
	CreateCommunity(context.Context, *CreateCommunityRequest) (*CommunityDetails, error)
	GetCommunityDetails(context.Context, *GetCommunityDetailsRequest) (*CommunityDetailsResponse, error)
	ListCommunities(context.Context, *ListCommunitiesRequest) (*ListCommunitiesResponse, error)
	RequestToJoinCommunity(context.Context, *CommunityUserRequest) (*emptypb.Empty, error)
	AcceptJoinRequest(context.Context, *CommunityUserActionRequest) (*emptypb.Empty, error)
	RejectJoinRequest(context.Context, *CommunityUserActionRequest) (*emptypb.Empty, error)
	GetCommunityMembers(context.Context, *GetCommunityMembersRequest) (*GetCommunityMembersResponse, error)
	GetUserJoinRequests(context.Context, *GetUserJoinRequestsRequest) (*GetUserJoinRequestsResponse, error)
	GetCommunityPendingRequests(context.Context, *GetCommunityPendingRequestsRequest) (*GetCommunityPendingRequestsResponse, error)
	mustEmbedUnimplementedCommunityServiceServer()
}

// UnimplementedCommunityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommunityServiceServer struct{}

func (UnimplementedCommunityServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedCommunityServiceServer) CreateCommunity(context.Context, *CreateCommunityRequest) (*CommunityDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityDetails(context.Context, *GetCommunityDetailsRequest) (*CommunityDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityDetails not implemented")
}
func (UnimplementedCommunityServiceServer) ListCommunities(context.Context, *ListCommunitiesRequest) (*ListCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunities not implemented")
}
func (UnimplementedCommunityServiceServer) RequestToJoinCommunity(context.Context, *CommunityUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToJoinCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) AcceptJoinRequest(context.Context, *CommunityUserActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptJoinRequest not implemented")
}
func (UnimplementedCommunityServiceServer) RejectJoinRequest(context.Context, *CommunityUserActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoinRequest not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityMembers(context.Context, *GetCommunityMembersRequest) (*GetCommunityMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityMembers not implemented")
}
func (UnimplementedCommunityServiceServer) GetUserJoinRequests(context.Context, *GetUserJoinRequestsRequest) (*GetUserJoinRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJoinRequests not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityPendingRequests(context.Context, *GetCommunityPendingRequestsRequest) (*GetCommunityPendingRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityPendingRequests not implemented")
}
func (UnimplementedCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {}
func (UnimplementedCommunityServiceServer) testEmbeddedByValue()                          {}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommunityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_CreateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, req.(*CreateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCommunityDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityDetails(ctx, req.(*GetCommunityDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListCommunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListCommunities(ctx, req.(*ListCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RequestToJoinCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RequestToJoinCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RequestToJoinCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RequestToJoinCommunity(ctx, req.(*CommunityUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_AcceptJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityUserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).AcceptJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_AcceptJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).AcceptJoinRequest(ctx, req.(*CommunityUserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RejectJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityUserActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RejectJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RejectJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RejectJoinRequest(ctx, req.(*CommunityUserActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCommunityMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityMembers(ctx, req.(*GetCommunityMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetUserJoinRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJoinRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetUserJoinRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetUserJoinRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetUserJoinRequests(ctx, req.(*GetUserJoinRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityPendingRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityPendingRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityPendingRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCommunityPendingRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityPendingRequests(ctx, req.(*GetCommunityPendingRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "community.CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _CommunityService_HealthCheck_Handler,
		},
		{
			MethodName: "CreateCommunity",
			Handler:    _CommunityService_CreateCommunity_Handler,
		},
		{
			MethodName: "GetCommunityDetails",
			Handler:    _CommunityService_GetCommunityDetails_Handler,
		},
		{
			MethodName: "ListCommunities",
			Handler:    _CommunityService_ListCommunities_Handler,
		},
		{
			MethodName: "RequestToJoinCommunity",
			Handler:    _CommunityService_RequestToJoinCommunity_Handler,
		},
		{
			MethodName: "AcceptJoinRequest",
			Handler:    _CommunityService_AcceptJoinRequest_Handler,
		},
		{
			MethodName: "RejectJoinRequest",
			Handler:    _CommunityService_RejectJoinRequest_Handler,
		},
		{
			MethodName: "GetCommunityMembers",
			Handler:    _CommunityService_GetCommunityMembers_Handler,
		},
		{
			MethodName: "GetUserJoinRequests",
			Handler:    _CommunityService_GetUserJoinRequests_Handler,
		},
		{
			MethodName: "GetCommunityPendingRequests",
			Handler:    _CommunityService_GetCommunityPendingRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/community.proto",
}
