// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/thread.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThreadService_HealthCheck_FullMethodName      = "/thread.ThreadService/HealthCheck"
	ThreadService_CreateThread_FullMethodName     = "/thread.ThreadService/CreateThread"
	ThreadService_GetThread_FullMethodName        = "/thread.ThreadService/GetThread"
	ThreadService_DeleteThread_FullMethodName     = "/thread.ThreadService/DeleteThread"
	ThreadService_LikeThread_FullMethodName       = "/thread.ThreadService/LikeThread"
	ThreadService_UnlikeThread_FullMethodName     = "/thread.ThreadService/UnlikeThread"
	ThreadService_BookmarkThread_FullMethodName   = "/thread.ThreadService/BookmarkThread"
	ThreadService_UnbookmarkThread_FullMethodName = "/thread.ThreadService/UnbookmarkThread"
	ThreadService_GetFeedThreads_FullMethodName   = "/thread.ThreadService/GetFeedThreads"
)

// ThreadServiceClient is the client API for ThreadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadServiceClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error)
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LikeThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BookmarkThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbookmarkThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFeedThreads(ctx context.Context, in *GetFeedThreadsRequest, opts ...grpc.CallOption) (*GetFeedThreadsResponse, error)
}

type threadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadServiceClient(cc grpc.ClientConnInterface) ThreadServiceClient {
	return &threadServiceClient{cc}
}

func (c *threadServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ThreadService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Thread)
	err := c.cc.Invoke(ctx, ThreadService_CreateThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*Thread, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Thread)
	err := c.cc.Invoke(ctx, ThreadService_GetThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_DeleteThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) LikeThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_LikeThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) UnlikeThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_UnlikeThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) BookmarkThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_BookmarkThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) UnbookmarkThread(ctx context.Context, in *InteractThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_UnbookmarkThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetFeedThreads(ctx context.Context, in *GetFeedThreadsRequest, opts ...grpc.CallOption) (*GetFeedThreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedThreadsResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetFeedThreads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadServiceServer is the server API for ThreadService service.
// All implementations must embed UnimplementedThreadServiceServer
// for forward compatibility.
type ThreadServiceServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error)
	CreateThread(context.Context, *CreateThreadRequest) (*Thread, error)
	GetThread(context.Context, *GetThreadRequest) (*Thread, error)
	DeleteThread(context.Context, *DeleteThreadRequest) (*emptypb.Empty, error)
	LikeThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error)
	UnlikeThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error)
	BookmarkThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error)
	UnbookmarkThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error)
	GetFeedThreads(context.Context, *GetFeedThreadsRequest) (*GetFeedThreadsResponse, error)
	mustEmbedUnimplementedThreadServiceServer()
}

// UnimplementedThreadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThreadServiceServer struct{}

func (UnimplementedThreadServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedThreadServiceServer) CreateThread(context.Context, *CreateThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedThreadServiceServer) GetThread(context.Context, *GetThreadRequest) (*Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedThreadServiceServer) DeleteThread(context.Context, *DeleteThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedThreadServiceServer) LikeThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeThread not implemented")
}
func (UnimplementedThreadServiceServer) UnlikeThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeThread not implemented")
}
func (UnimplementedThreadServiceServer) BookmarkThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkThread not implemented")
}
func (UnimplementedThreadServiceServer) UnbookmarkThread(context.Context, *InteractThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbookmarkThread not implemented")
}
func (UnimplementedThreadServiceServer) GetFeedThreads(context.Context, *GetFeedThreadsRequest) (*GetFeedThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedThreads not implemented")
}
func (UnimplementedThreadServiceServer) mustEmbedUnimplementedThreadServiceServer() {}
func (UnimplementedThreadServiceServer) testEmbeddedByValue()                       {}

// UnsafeThreadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadServiceServer will
// result in compilation errors.
type UnsafeThreadServiceServer interface {
	mustEmbedUnimplementedThreadServiceServer()
}

func RegisterThreadServiceServer(s grpc.ServiceRegistrar, srv ThreadServiceServer) {
	// If the following call pancis, it indicates UnimplementedThreadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThreadService_ServiceDesc, srv)
}

func _ThreadService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_DeleteThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_LikeThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).LikeThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_LikeThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).LikeThread(ctx, req.(*InteractThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_UnlikeThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).UnlikeThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_UnlikeThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).UnlikeThread(ctx, req.(*InteractThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_BookmarkThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).BookmarkThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_BookmarkThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).BookmarkThread(ctx, req.(*InteractThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_UnbookmarkThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).UnbookmarkThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_UnbookmarkThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).UnbookmarkThread(ctx, req.(*InteractThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetFeedThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetFeedThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetFeedThreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetFeedThreads(ctx, req.(*GetFeedThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThreadService_ServiceDesc is the grpc.ServiceDesc for ThreadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thread.ThreadService",
	HandlerType: (*ThreadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ThreadService_HealthCheck_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _ThreadService_CreateThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _ThreadService_GetThread_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _ThreadService_DeleteThread_Handler,
		},
		{
			MethodName: "LikeThread",
			Handler:    _ThreadService_LikeThread_Handler,
		},
		{
			MethodName: "UnlikeThread",
			Handler:    _ThreadService_UnlikeThread_Handler,
		},
		{
			MethodName: "BookmarkThread",
			Handler:    _ThreadService_BookmarkThread_Handler,
		},
		{
			MethodName: "UnbookmarkThread",
			Handler:    _ThreadService_UnbookmarkThread_Handler,
		},
		{
			MethodName: "GetFeedThreads",
			Handler:    _ThreadService_GetFeedThreads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/thread.proto",
}
